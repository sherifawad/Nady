using Core.Models;
using DataBase.Configuration;
using DataBase.Models;
using DataBase.Services.AuditService;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using static System.Environment;

namespace DataBase
{
    public class NadyDataContext : DbContext, IDatabaseContext
    {
        public NadyDataContext(DbContextOptions<NadyDataContext> options) : base(options) { }
        public DbSet<Audit> Audits { get; set; }
        public DbSet<Member> Members { get; set; }
        public DbSet<MemberDetails> MemberDetails { get; set; }
        public DbSet<MemberHistory> MemberHistories { get; set; }
        public DbSet<MemberPayment> MemberPayments { get; set; }
        public DbSet<ScheduledPayment> ScheduledPayments { get; set; }
        public DbSet<MemberVisitor> MemberVisitors { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            //modelBuilder.ApplyConfigurationsFromAssembly(typeof(AppContext).Assembly);

            //modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());


            if (Database.ProviderName == "Microsoft.EntityFrameworkCore.Sqlite") modelBuilder.ApplyDataFixForSqlite();
        }

        #region Audit Process

        public async override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)
        {
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        private List<AuditEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                //TODO add authentication
                //if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged || string.IsNullOrEmpty(Authentication?.LoggedUserName))
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged )
                    continue;

                //TODO add authentication
                //var auditEntry = new AuditEntry(entry, Authentication.LoggedUserName);
                var auditEntry = new AuditEntry(entry, "");
                var entityType = Model.FindEntityType(entry.Entity.GetType());
                //var schema = entityType..GetSchema();
                //var tableName = entityType.GetTableName();
                //auditEntry.TableName = entry.Entity.Metadata.GetTableName();
                //TODO add table Nmae
                auditEntry.TableName = entityType.DisplayName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    // The following condition is ok with EF Core 2.2 onwards.
                    // If you are using EF Core 2.1, you may need to change the following condition to support navigation properties: https://github.com/dotnet/efcore/issues/17700
                    // if (property.IsTemporary || (entry.State == EntityState.Added && property.Metadata.IsForeignKey()))
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    var entidad = entry.Entity as BaseModel;

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            //auditEntry.NewValues[propertyName] = property.CurrentValue;
                            //auditEntry.AuditType = AuditType.Create;
                            if (entidad != null)
                            {
                                entidad.CreatedDate = DateTimeOffset.Now;
                                //TODO add authentication
                                entidad.CreatedByUser = "";
                                //entidad.CreatedByUser = Authentication.LoggedUserName;
                            }
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            auditEntry.AuditType = AuditType.Delete;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                                auditEntry.AuditType = AuditType.Update;
                                if (entidad != null)
                                {
                                    entidad.ModifiedDate = DateTimeOffset.Now;
                                    entidad.ModifiedByUser = "";
                                    //TODO add authentication
                                    //entidad.ModifiedByUser = Authentication.LoggedUserName;
                                }
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Audits.Add(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                Audits.Add(auditEntry.ToAudit());
            }

            return SaveChangesAsync();
        }

        #endregion
    }
}
